class Map:
	def __init__(self):
		self.map = []
		self.rows = 0
		self.columns = 0
		self.start = []
		self.destination = []
	
	def input(self):
		tmp = raw_input('What is the size of your map(Two integers: raws * columns)?\n')
		tmp = tmp.split()
		if len(tmp) != 2:
			print 'Wrong Size!'
			return
		self.rows, self.columns = map(int, tmp)
		print 'Now Show Me The Map(\'_\' means road, \'X\' means obstacle):'
		row = 0
		while row < self.rows:
			e_row = raw_input()
			e_row = e_row.split()
			if len(e_row) != self.columns:
				print 'Wrong Raw, Stop Kidding Me.'
				continue
			self.map.append(e_row)
			row += 1
	def show(self):
		for row in self.map:
			print (" ".join(row))
		print self.start, " ", self.destination
	
	def set(self):
		tmp = raw_input('Tell Me Where Are You Now:')
		self.start = map(int, tmp.split())
		
		tmp = raw_input('Tell Me Where Are You Going:')
		self.destination = map(int, tmp.split())
class Node:
	def __init__(self, name, index_r, index_c):
		self.type = None
		self.taken = False
		self.father = None
		self.name = name
		self.index_r = index_r
		self.index_c = index_c
		self.g_value = 0
		self.f_value = 0
		self.value = 0
	def __lt__(self, node):
		return self.value < node.g_value
	
	def __gt__(self, node):
		return self.value > node.g_value
	
	def __le__(self, node):
		return self.value <= node.g_value
	
	def __ge__(self, node):
		return self.value >= node.g_value
		
class TreeNode(Node):
	def __init__(self, name, index_r, index_c):
		Node.__init__(self, name, index_r, index_c)
		self.type = 'road'
		self.leaves = dict()

class ObstacleNode(Node):
	def __init__(self, name, index_r, index_c):
		Node.__init__(self, name, index_r, index_c)
		self.type = 'obstacle'
		
#connecting each node on the map to its neighbor node, and the distance is 1
#store all the nodes into a 2-Dimension list named "nodes".
def NodesBuild(Map):
	nodes = []
	for index_r in range(Map.rows):
		row_nodes = []
		for index_c in range(Map.columns):
			index_r, index_c = map(str, [index_r, index_c])
			name = ",".join([index_r, index_c])# The STN is index_r,index_c
			index_r, index_c = map(int, [index_r, index_c])
			if Map.map[index_r][index_c] == '_':
				node = TreeNode(name, index_r, index_c)
			if Map.map[index_r][index_c] == 'X':
				node = ObstacleNode(name, index_r, index_c)
			row_nodes.append(node)
		nodes.append(row_nodes)
	for row in nodes:
		for node in row:
			if node.type != 'obstacle':
				index_r, index_c = map(int, node.name.split(","))
				left = index_c - 1
				right = index_c + 1
				up = index_r - 1
				down = index_r + 1
				if left in range(Map.columns):
					node.leaves[nodes[index_r][left]] = 1
				if right in range(Map.columns):
					node.leaves[nodes[index_r][right]] = 1
				if up in range(Map.rows):
					node.leaves[nodes[up][index_c]] = 1
				if down in range(Map.rows):
					node.leaves[nodes[down][index_c]] = 1
	return nodes
		
def get_fValue(cur_node, des_node):
	index_r = cur_node.index_r - des_node.index_r
	index_c = cur_node.index_c - des_node.index_c
	if index_r < 0:
		index_r = -index_r
	if index_c < 0:
		index_c = -index_c
	return index_r + index_c

def insert_current(current, node):
	index = 0
	for index in range(len(current)):
		if current[index] >= node:
			break
	current.insert(index, node)
	return current

def in_not(node, current):
	for elem in current:
		if elem.name == node.name:
			return True
	else:
		return False

def Reset(nodes):
	for row in nodes:
		for node in row:
			node.g_value = 0
			node.f_value = 0
			node.value = 0
	return nodes
	
def A_Star(i_cur, i_des, current, nodes):
	if i_cur.name == i_des.name:
		return i_cur.g_value
		
	flag = False
	if i_cur.type == 'road':
		for node in i_cur.leaves.keys():
			if not node.taken:
				flag = True
		if not flag:
			return 'trick'
	
	current.remove(i_cur)
	for child in i_cur.leaves:
		if not in_not(child, current):
			child.g_value = i_cur.g_value + i_cur.leaves[child]
			child.f_value = get_fValue(child, i_des)
			child.value = child.g_value + child.f_value
			child.father = i_cur
			current = insert_current(current, child)
	
	for index in range(len(current)):
		if current[index].taken:
			continue
		current[index].taken = True
		if current[index].type == 'obstacle':
			current[index].father.leaves.pop(current[index])
			cache = current[index].father.g_value
			current_next = [current[index].father]
			Reset(nodes)
			reschedule = A_Star(current_next[0], i_des, current_next, nodes)
			if reschedule == 'Trick':
				return 'Trick'
			if reschedule != 'trick':
				return cache + reschedule
		else:
			next = A_Star(current[index], i_des, current, nodes)
			if next == 'Trick':
				return 'Trick'
			if next != 'trick':
				return next
				
	return 'Trick'
	
def main():
	map_one = Map()
	map_one.input()
	map_one.set()
	nodes = NodesBuild(map_one)
	start_node = nodes[map_one.start[0]][map_one.start[1]]
	destination_node = nodes[map_one.destination[0]][map_one.destination[1]]
	current = []
	start_node.f_value = get_fValue(start_node, destination_node)
	start_node.value = start_node.g_value + start_node.f_value
	start_node.taken = True
	current.append(start_node)
	result = A_Star(start_node, destination_node, current, nodes)
	print result
	
if __name__ == '__main__':
	main()
